todo:

do we need set/start/stop/showBenchmark()?

set up class constants for base class for methods that appear to need them

organize methods by type/purpose and by alphabet

todo comment in connect()
todo on listenOnce()

evaluate propriety of return values on all methods

why do we have send() and _send()?

_checkBuffer() may not work right

_rawReceive() says 'global $bot;' ...BAD!

integrate my ping fix into base code somehow.

_selecttimeout() may have an easier way of being written without needing calculateselecttimeout()

why is a function called _microint() returning a float????

what are the funcs from line 2926 to 2951 doing?? or supposed to do?

figure out visibility for isError() and throwError()

classes are chained together with inheritance. making a new Net_SmartIRC() calls:
Net_SmartIRC <- *_messagehandler <- *_irccommands <- *_base
like concatenating classes or something. crazy. fix it.

autoreconnect shouldn't be an option. it should be hard coded as true.

there needs to be a stoplisten method that a bot can call that returns control to the calling script.

**API** replycodes are in defines.php and public vars in base class??
**API** public $channel, $user? make private + getters/setters... + __get/__set for BC?
**API** move logger out to its own class and pass in as a dependency w/ class consts
	log()
	setLogDestination()
	setLogFile()
**API** change most defines to class constants
**API** why would we need connect() and login() to be called separately?
**API** loadModule() should be able to take any class name
	- also it needs to be pulling in module classes that have the proper iface
**API** registerTimeHandler should probably convert times from s to ms internally
**API** then we have several structs, basically. is that the best way to do it?
	(data, actionhandler, timehandler, channel, user, channeluser<-user, ircuser<-user)
**API** connect and login need to be one method. and return success or failure.


actionhandler is already a separate class, but not enough. see registerActionhandler()
also registerTimehandler()

* some of the commands that send messages trigger server responses.
* those commands need to start listeners for those responses that confirm state.
* and then do something on failure.

test non-socket usage!
